
public class test3 {
/*
클래스(class)란 ?
"객체의 특성(속성, 기능)에 대한 정의를 한 것"

필드(field)란 ?
클래스를 구성하는 요소 중 하나로 클래스 내부 멤버이다.
"어떠한 데이터를 저장하기 위한 역할을 담당"하며
클래스 내부의 생성자와 메소드 밖에 정의가 된다.

생성자(Constructor)란 ?
"인스턴스가 생성될 때 호출되는 '인스턴스 초기화 메서드'이다."
따라서 인스턴스 변수의 초기화 작업에 주로 사용되며,
인스턴스 생성 시에 실행되어야 할 작업을 위해서도 사용된다

오버로딩이란 ?
"한 클래스 내에 동일한 이름의 메소드를 여러 개 작성하는 기법"

this란 ?
"모든 인스턴스의 메소드에 숨겨진 채 존재하는 레퍼런스로, 할당된 객체"를 가리킴
함수 실행 시 전달되는 객체의 주소를 자동으로 받음

this()란 ?
생성자, 같은 클래스의 다른 생성자를 호출할 때 사용, 반드시 첫 번째 줄에 선언해야 함

메소드(Method)란 ?
수학의 함수와 비슷하며 호출을 통해 사용, 전달 값이 없는 상태로 호출을 하거나
어떤 값을 전달하여 호출을 하며, 함수 내에 작성된 연산 수행
수행 후 반환 값 / 결과 값은 있거나 없을 수 있음

setter 메소드란 ?
"필드에 변경할 값을 전달 받아서 필드 값을 변경하는 메소드"

getter 메소드란 ?
"필드에 기록된 값을 읽어서 요청한 쪽으로 읽은 값을 넘기는 메소드"

return이란 ?
"해당 메소드를 종료하고 자신을 호출한 메소드로 돌아가는 예약어"
반환 값이 있다면 반환 값을 가지고 자신을 호출한 메소드로 돌아감

객체배열이란 ?
"객체 참조형 변수를 저장하는 배열"

상속(Inheritance)이란 ?
"다른 클래스(부모)가 가지고 있는 멤버(필드, 메소드)들을 새로 작성할 클래스(자식)에서 직접 만들지 않고
상속을 받음으로써 새 클래스(자식)가 자신의 멤버처럼 사용할 수 있는 기능"

오버라이딩(Overriding)이란?
"자식 클래스가 상속 받은 부모 메소드를 재작성 하는 것"
부모가 제공하는 기능을 후손이 일부 고쳐 사용하겠다는 의미로
자식 객체를 통한 실행 시 후손 것이 우선권을 가짐

오버로딩(Overloading)이란 ?
"한 클래스 내에서 같은 이름의 메소드를 여러 개 정의하는 것"

다형성(Polymorphism)이란 ?
객체 지향 언어의 특징 중 하나로 ‘다양한 형태를 갖는다’라는 뜻으로
"하나의 행동으로 여러 가지 일을 수행하는 개념."
상속을 이용한 기술로 부모 클래스 타입 참조변수 하나로
상속 관계에 있는 여러 타입의 자식 객체를 참조할 수 있는 기술

업 캐스팅(Up Casting)이란 ?
"상속 관계에 있는 부모, 자식 클래스 간에 부모타입의 참조형 변수가
모든 자식 타입 객체의 주소를 참조할 수 있음"

다운 캐스팅(Down Casting)이란 ?
"자식 객체의 주소를 받은 부모 참조형 변수를 가지고 자식의 멤버를 참조해야 할 경우,
부모 클래스 타입의 참조형 변수를 자식 클래스 타입으로 형변환 하는 것"
자동으로 처리되지 않기 때문에 반드시 자식 타입을 명시하여 형변환

바인딩이란 ?
실제 실행할 메소드 코드와 호출하는 코드를 연결 시키는 것

정적 바인딩이란 ?
프로그램이 실행되기 전 컴파일 단계에서 메소드와 메소드 호출부를 연결

동적 바인딩이란 ?
컴파일 시 정적 바인딩된 메소드를 실행할 당시의 객체 타입을 기준으로 바인딩 되는 것

instanceof 연산자란 ?
현재 참조형 변수가 어떤 클래스 형의 객체 주소를 참조하고 있는지 확인 할 때 사용
클래스 타입이 맞으면 true, 맞지 않으면 false 반환

추상 클래스(abstract class)란 ?
몸체 없는 메소드를 포함한 클래스 (미완성 설계도)
추상 클래스일 경우 클래스 선언부에 abstract 키워드 사용

추상 메소드(abstract method)란 ?
몸체 없는 메소드
추상 메소드의 선언부에 abstract 키워드 사용
상속 시 반드시 구현해야 하는, 오버라이딩이 강제화되는 메소드

인터페이스(Interface)란 ?
상수형 필드와 추상 메소드만을 작성할 수 있는 추상 클래스의 변형체
"메소드의 통일성을 부여하기 위해 추상 메소드만 따로 모아놓은 것"으로
상속 시 인터페이스 내에 정의된 모든 추상메소드 구현해야 함

예외 처리(Exception Handling)란 ?
프로그램 수행 시 치명적 상황이 발생하여 비정상 종료 상황이 발생한 것, 프로그램 에러라고도 함

try~catch문을 이용하여 예외 처리

try : Exception 발생할 가능성이 있는 코드를 안에 기술

catch : try 구문에서 Exception 발생 시 해당하는 Exception에 대한 처리 기술
여러 개의 Exception 처리가 가능하나 Exception간의 상속 관계 고려해야 함

finally : Exception 발생 여부와 관계없이 꼭 처리해야 하는 로직 기술
중간에 return문을 만나도 finally구문은 실행되지만
System.exit();를 만나면 무조건 프로그램 종료
주로 java.io나 java.sql 패키지의 메소드 처리 시 이용

컬렉션(Collection)이란 ?
메모리상에서 자료를 구조적으로 처리하는 방법을 자료구조라 일컫는데
컬렉션(Collection)은 "자바에서 제공하는 자료구조를 담당하는 프레임워크"
추가, 삭제, 정렬 등의 기능처리가 간단하게 해결 되어 자료구조적 알고리즘을 구현할 필요 없음
java.util 패키지에 포함되며, 인터페이스를 통해 정형화된 방법으로 다양한 컬렉션 클래스 이용 가능

자료구조란 ?
메모리상에서 자료를 구조적으로 처리하는 방법
데이터(자료)를 메모리에서 구조적으로 처리하는 방법론

List란 ?
"자료들을 순차적으로 나열한 자료구조"로 인덱스로 관리되며, 중복해서 객체 저장 가능
구현 클래스로 ArrayList와 Vector, LinkedList가 있음

ArrayList
List의 후손으로 초기 저장 용량은 10으로 자동 설정되며 따로 지정도 가능
저장 용량을 초과한 객체들이 들어오면 자동으로 늘어나며 고정도 가능
동기화(Synchronized)를 제공하지 않음

Vector
List의 후손
ArrayList와 동등하지만 동기화(Synchronized)를 제공한다는 점이 ArrayList와 차이점
List 객체들 중에서 가장 성능이 좋지 않음

LinkedList
List의 후손으로, 인접 참조를 링크해 체인처럼 관리
특정 인덱스에서 객체를 제거하거나 추가하게 되면 바로 앞/뒤 링크만 변경하면 되기 때문에
객체 삭제와 삽입이 빈번하게 일어나는 곳에서는 ArrayList보다 성능이 좋음

Set란 ?
저장 순서가 유지되지 않고, 중복 객체도 저장하지 못하게 하는 자료 구조
null도 중복을 허용하지 않기 때문에 1개의 null만 저장
구현 클래스로 HashSet, LinkedHashSet, TreeSet이 있음

HashSet
Set에 객체를 저장할 때 hash함수를 사용하여 처리 속도가 빠름
동일 객체 뿐 아니라 동등 객체도 중복하여 저장하지 않음

LinkedHashSet
HashSet과 거의 동일하지만 Set에 추가되는 순서를 유지한다는 점이 다름

Map이란 ?
키(key)와 값(value)으로 구성되어 있으며, 키와 값은 모두 객체
키는 중복 저장을 허용하지 않고(Set방식), 값은 중복 저장 가능(List방식)
키가 중복되는 경우, 기존에 있는 키에 해당하는 값을 덮어 씌움
구현 클래스로 HashMap, HashTable, LinkedHashMap, Properties, TreeMap이 있음

HashMap
키 객체는 hashCode()와 equals()를 재정의해 동등 객체가 될 조건을 정해야 함
때문에 키 타입은 hashCode와 equals()메소드가 재정의되어 있는 String타입을 주로 사용

Hashtable
키 객체 만드는 법은 HashMap과 동일하나 Hashtable은 스레드 동기화가 된 상태이기 때문에,
복수의 스레드가 동시에 Hashtable에 접근해 객체를 추가, 삭제 하더라도 스레드에 안전 (Thread safe)

Properties란 ?
키와 값을 String타입으로 제한한 Map컬렉션
주로 Properties는 프로퍼티(*.properties)파일을 읽어 들일 때 주로 사용

TreeSet과 TreeMap
검색 기능을 강화시킨 컬렉션으로, 계층 구조를 활용해 이진 트리 자료구조를 구현하여 제공

TreeSet
이진 트리를 기반으로 한 Set컬렉션으로, 왼쪽과 오른쪽 자식 노드를 참조하기 위한 두 개의 변수로 구성

TreeMap
이진 트리를 기반으로 한 Map 컬렉션으로, 키와 값이 저장된 Map.Entry를 저장하고
왼쪽과 오른쪽 자식 노드를 참조하기 위한 두 개의 변수로 구성

제네릭스(Generics)란 ?
JDK1.5부터 제공되는 기능
클래스나 메소드 내부에서 다룰 데이터의 클래스 타입을 지정하거나,
컬렉션이 다룰 클래스 타입을 제한하여 한 가지 종류의 클래스만 저장할 수 있게 한 기능

입출력(IO)란 ?
Input과 Output의 약자, "컴퓨터 내부 또는 외부 장치와 프로그램 간의 데이터를 주고 받는 것"
장치와 입출력을 위해서는 하드웨어 장치에 직접 접근이 필요한데 다양한 매체에 존재하는 데이터들을
사용하기 위해 입출력 데이터를 처리할 공통적인 방법으로 스트림 이용

File 클래스란 ?
파일 시스템의 파일을 표현하는 클래스
파일 크기, 파일 속성, 파일 이름 등의 정보와 파일 생성 및 삭제 기능 제공

스트림(Stream) 클래스란 ?
입출력 장치에서 데이터를 읽고 쓰기 위해서 자바에서 제공하는 클래스
모든 스트림은 단방향이며 각각의 장치마다 연결할 수 있는 스트림 존재
하나의 스트림으로 입출력을 동시에 수행할 수 없으므로 동시에 수행하려면 2개의 스트림 필요

InputStream이란 ?
바이트 기반 입력 스트림의 최상위 클래스로 추상클래스임

FileInputStream이란 ?
파일을 바이트 단위로 읽을 때 사용
그림, 오디오, 비디오, 텍스트 파일 등 모든 종류의 파일 읽기 가능
InputStream의 하위 클래스로 InputStream과 사용 방법 동일

OutputStream이란 ?
바이트 기반 출력 스트림의 최상위 클래스로 추상클래스임

FileOutputStream이란 ?
파일능 바이트 단위로 저장할 때 사용
그림, 오디오, 비디오, 텍스트 파일 등 모든 종류의 데이터를 파일로 저장
OutputStream의 하위 클래스로 OutputStream과 사용 방법 동일

Reader란 ?
문자 기반 입력 스트림의 최상위 클래스로 추상클래스임

FileReader란 ?
문자 단위로 텍스트 기반 파일을 읽을 때 사용
텍스트가 아닌 그림, 오디오, 비디오 등의 파일은 읽기 불가능
Reader의 하위 클래스로 Reader와 사용 방법 동일

Writer란 ?
문자 기반 출력 스트림의 최상위 클래스로 추상클래스임

FileWriter란 ?
문자 단위로 텍스트 기반 파일을 쓸(저장할) 때 사용
텍스트가 아닌 그림, 오디오, 비디오 등의 파일은 저장 불가능
Writer의 하위 클래스로 Writer와 사용 방법 동일

보조 스트림이란 ?
스트림의 기능을 향상시키거나 새로운 기능을 추가하기 위해 사용
보조 스트림은 실제 데이터를 주고 받는 스트림이 아니기 때문에 입출력 처리 불가능
기반 스트림을 먼저 생성한 후 이를 이용하여 보조 스트림 생성

네트워크(Network)란 ?
여러 대의 컴퓨터를 통신 회선으로 연결한 것(홈 네트워크, 지역 네트워크, 인터넷 등이 해당)
여러 통신기기들을 서로 연결하여 데이터를 손쉽게 주고받거나 자원 등을 공유하기 위해 사용

서버(Server)란 ?
서비스를 제공하는 컴퓨터 또는 프로그램

클라이언트(Client)란 ?
서비스를 요청하는 컴퓨터 또는 프로그램

IP주소란 ?
"네트워크 상에서 컴퓨터를 식별하는 번호"로 네트워크 어댑터(랜카드)마다 할당 되어 있음

포트(Port)란 ?
"같은 컴퓨터 내에서 프로그램을 식별하는 번호"로
클라이언트는 서버 연결 요청 시 IP주소와 포트 번호를 알아야 함

소켓(Socket)이란 ?
프로세스 간의 통신에 사용되는 양쪽 끝 단

프로토콜(Protocol)이란 ?
컴퓨터 간의 정보를 주고 받을 때의 통신방법에 대한 규약으로
접속이나, 전달방식, 데이터의 형식, 검증 방법 등을 맞추기 위한 약속

TCP(Transmission Control Protocol)란 ?
데이터의 전달의 신뢰성을 최대한 보장하기 위한 방식으로 "연결지향형 통신"이다.
순차적으로 데이터를 전송하고 확인 및 오류 시 재전송을 한다.

UDP(User Datagram Protocol)란 ?
데이터의 빠른 전달을 보장하기위한 방식으로 "비연결 지향형 통신"이다.
확인 및 재전송 작업이 없다.

1. Class 정의와 작성법에 대해서 서술하시오.
객체의 속성과 기능을 정의한 틀
작성법 :
[접근제한자] [예약어] class 클래스명 { }

2. 접근제한자의 종류와 제한 범위를 서술하세요.
public : 전체
protected : 패키지 + 상속 관계 후손 클래스
(default) : 패키지
private : 클래스

3. static이란 무엇인지 서술하세요.
정적 메모리(공유 메모리) 영역이며 필드 또는 메서드에 작성 후 프로그램 실행 시 static 메모리 영역에 클래스명.필드명 형식으로 할당된다.
같은 타입의 여러 객체가 공유하거나 프로그램 전체적으로 공유할 때 사용.

4. final 예약어의 필드,메서드,클래스별 의미
필드 : 변하지 않는 하나의 값만 계속 저장해야 하는 변수에 사용한다.
메서드 : 상속 시 오버라이딩이 불가능하다.
클래스 : 상속 받을 수 없게 정의한다.

5. 생성자의 정의와 작성 방법을 서술
정의 : 객체가 new 연산자에서 Heap 메모리 영역으로 할당될 때 객체 안에서 전달된 초기값을 받아 필드에 기록하는 것.
작성 방법 : 생성자명을 클래스명과 동일하게 적는다.

6. 컴파일러가 컴파일 시 자동으로 추가해주는 구문을 3가지 이상 작성하세요.
public / 기본 생성자 / toString()

7. this 참조 변수, this 생성자에 대해서 서술하세요.
this 참조 변수 : 생성된 객체에 숨겨진 참조 변수 현재 객체를 참조한다.
this() 생성자 : 재사용성을 늘리고 생성자를 이용한 필드 초기화 구문의 중복을 없앤다.

8. return 예약어의 의미를 서술하세요.
해당 메소드를 종료하고 자신을 호출한 메소드로 돌아가는 예약어
반환 값이 있다면 반환 값을 가지고 자신을 호출한 메소드로 돌아간다.

9. 객체 배열이란 무엇인지 서술하세요.
객체 참조형 변수를 저장하는 배열

10. 객체 지향 언어의 특징 중 상속에의 정의를 서술하세요.
다른 클래스가 가지고 있는 멤버들을 새로 작성할 클래스에서 직접 만들지 않고
상속을 받음으로써 새로 작성한 클래스가 자신의 멤버처럼 사용할 수 있게 해주는 기능

11. 상속의 장점 3가지를 서술하세요.
재사용성 증가 / 중복 코드 제거 / 유지보수성 향상

12. super 참조 변수, super() 생성자에 대해서 서술하세요.
super 참조 변수 : 상속을 통해 자식 클래스를 정의할 때 해당 자식 클래스의 부모 객체를 가리키는 참조 변수
super() 생성자 : 부모 객체의 생성자를 호출하는 메소드

13. 오버로딩,오버라이딩의 차이점을 서술하세요
오버로딩은 한 클래스 내에서 같은 이름의 메소드를 여러개 정의하지만 오버라이딩은 자식 클래스가 상속 받은 부모 메서드를 재작성 한다.

14. 객체 지향언어의 특징 중 다형성의 정의를 서술하세요.
하나의 행동으로 여러 가지 일을 수행하는 개념으로 다양한 형태를 갖는다.

15. 다형성의 업 캐스팅, 다운 캐스팅에 대해서 서술하세요.
업 캐스팅 : 상속 관계에 있는 클래스 간 부모타입의 참조형 변수가 모든 자식 타입 객체의 주소를 참조할 수 있다.
다운 캐스팅 : 자식 객체의 주소를 받은 부모 참조형 변수를 가지고 자식의 멤버를 참조해야 할 경우, 부모 클래스 타입의 참조형 변수를 자식 클래스 타입으로 형변환 하는 것.

16. 정적 바인딩, 동적 바인딩에 대해서 서술하세요
정적 바인딩 : 프로그램이 실행되기 전 컴파일 단계에서 메소드와 메소드 호출부를 연결하는 것
동적 바인딩 : 컴파일 시 정적 바인딩된 메소드를 실행할 당시의 객체 타입을 기준으로 바인딩 되는 것

17. 추상 메서드에 대해서 서술하세요.
몸체 없는 메소드
추상 메소드의 선언부에 abstract 키워드 사용
상속 시 반드시 구현해야 하는, 오버라이딩이 강제화되는 메소드

18. 추상클래스와 인터페이스의 차이점을 서술하세요.
추상 클래스는 몸체 없는 메소드를 포함한 클래스고 인터페이스는 메소드의 통일성을 위해 추상 메소드만 따로 모아 놓은 것이다

19. 예외, 예외 처리에 대해서 서술하세요.
예외 : 프로그램 수행 시 실행되지 않는 프로그램 에러
예외 처리 : 발생하는 예외를 미리 확인해서 상황에 따른 예외 처리 코드를 작성할 수 있게 하는 것.

20. 에러의 정의와 종류를 서술하세요.
에러란 프로그램 수행시 실행되지 않는 프로그램을 말한다.
1. 컴파일 에러 : 프로그램의 실행을 막는 소스 코드상의 문법 에러. 소스 코드 수정으로 해결.
2. 런타임 에러 : 프로그램 실행 중 발생하는 에러. 주로 if문 사용으로 에러 처리
3. 시스템 에러 : 컴퓨터 오작동으로 인한 에러, 소스 코드 수정으로 해결 불가

21. checked Exception, Unchecked Exception에 대해서 서술하세요.
Checked Exception은 반드시 예외 처리해주어야 하고
Unchecked Exception은 사용자의 부주의로 발생했을 가능성이 커 예외 처리보다는  코드를 수정해야한다.

22. 예외 처리 방법 2가지를 서술하세요.
1. Exception이 발생한 곳에서 직접 처리
try~catch문을 이용하여 예외 처리
2. Exception 처리를 호출한 메소드에게 위임
메소드 선언 시 throws Exception명을 추가하여 호출한 상위 메소드에게 처리 위임

23. 컬렉션의 종류 3가지와 특징을 서술하세요.
List : 자료들을 순차적으로 나열한 자료구조
Set : 저장 순서가 유지되지 않고, 중복 객체도 저장하지 못하게 하는 자료구조
Map : 키와 값으로 구성되어있으며, 키는  중복 저장을 허용하지 않는 Set방식이고 값은 중복 저장을 허용하는 List방식이다. 

24. Stream이란 무엇인지 서술하세요.
입출력 장치에서 데이터를 읽고 쓰며 , 단방향이다

25. 서버와 클라이언트에 대해서 서술하세요.
서버 : 서비스를 제공하는 컴퓨터 또는 프로그램
클라이언트 : 서비스를 요청하는 컴퓨터 또는 프로그램

26. IP와 Port에 대해서 서술하세요.
IP : 네트워크 상에서 컴퓨터를 식별하는 번호
Port : 같은 컴퓨터 내에서 프로그램을 식별하는 번호

27. Socket에 대해서 서술하세요.
프로세스 간의 통신에 사용되는 양쪽 끝 단이다.

28. 프로토콜의 정의를 서술하세요.
컴퓨터 간의 정보를 주고 받는 통신 방법에 대한 규약

29. TCP에 대해서 서술하세요.
데이터의 전달의 신뢰성을 최대한 보장하기 위한 방식으로 "연결지향형 통신"이다.
순차적으로 데이터를 전송하고 확인 및 오류 시 재전송을 한다.

30. UDP에 대해서 서술하세요.
데이터의 빠른 전달을 보장하기위한 방식으로 "비연결 지향형 통신"이다.
확인 및 재전송 작업이 없다.

 */
	
}
